# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: walysongo
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: client-api
service: typescript-aws-lambda-dynamo

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

provider:
  name: aws
  runtime: nodejs20.x
  stage: test
  region: sa-east-1
  environment:
    DYNAMODB_CLIENT_TABLE: dynamodb
    PROD: true
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    AWS_REGION: ${env:AWS_REGION}

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-dynamodb-local

functions:
  createClient:
    handler: src/functions/ClientFunctions.create
    name: create-client
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: client
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt ClientsTable.Arn

  getAllClients:
    handler: src/functions/ClientFunctions.findAll
    name: get-all-clients
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: clients
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt ClientsTable.Arn

  getClientById:
    handler: src/functions/ClientFunctions.findById
    name: get-client-by-id
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: client/{id}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt ClientsTable.Arn

  updateClient:
    handler: src/functions/ClientFunctions.update
    name: update-client
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: client/{id}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt ClientsTable.Arn

  deleteClient:
    handler: src/functions/ClientFunctions.deleteById
    name: delete-client
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: client/{id}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt ClientsTable.Arn

resources:
  Resources:
    clientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:  dynamodb
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
